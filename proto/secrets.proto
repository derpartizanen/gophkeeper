syntax = "proto3";

package proto;
option go_package = "github.com/derpartizanen/gophkeeper/proto";

import "google/protobuf/field_mask.proto";

// Type of stored data.
enum DataKind {
  BINARY = 0; // Arbitrary binary data.
  TEXT = 1; // Arbitrary text data.
  CREDENTIALS = 2; // Authentication credentials.
  CARD = 3; // Bank card info.
}

message Secret {
  string id = 1; // ID of a secret in UUIDv4 form.
  string name = 2; // Name of a secret.
  DataKind kind = 3; // Type of stored data.
  bytes metadata = 4; // Arbitrary encrypted description (activation codes, bank names etc).
}

message CreateSecretRequest {
  string name = 1; // Name of a secret.
  bytes metadata = 2; // Arbitrary description data encrypted by client.
  DataKind kind = 3; // Type of stored data.
  bytes data = 4; // Actual secret data encrypted by client, see data.proto.
}

message CreateSecretResponse {
  string id = 1; // ID of a secret in UUIDv4 form.
}

message ListSecretsRequest {
}

message ListSecretsResponse {
  repeated Secret secrets = 1; // List of secrets created by current user.
};

message GetSecretRequest {
  string id = 1; // ID of a secret in UUIDv4 form.
}

message GetSecretResponse {
  Secret secret = 1; // Secret info.
  bytes data = 2; // Actual encrypted secret data, see data.proto.
}

message UpdateSecretRequest {
  string id = 1; // ID of a secret in UUIDv4 form.
  google.protobuf.FieldMask update_mask = 2; // Specifies what values should be changed.

  string name = 3; // Name of a secret.
  bytes metadata = 4; // Arbitrary description data encrypted by client.
  bytes data = 5; // Actual secret data encrypted by client, see data.proto.
}

message UpdateSecretResponse {
}

message DeleteSecretRequest {
  string id = 1; // ID of a secret in UUIDv4 form.
}

message DeleteSecretResponse {
}

// All commands require valid access_token passed in metadata.
service Secrets {
  // Store new secret.
  rpc Create(CreateSecretRequest) returns (CreateSecretResponse);

  // List brief secrets without data for the current user.
  rpc List(ListSecretsRequest) returns (ListSecretsResponse);

  // Get a secret with data.
  rpc Get(GetSecretRequest) returns (GetSecretResponse);

  // Change a secret and/or stored data.
  rpc Update(UpdateSecretRequest) returns (UpdateSecretResponse);

  // Remove a secret.
  rpc Delete(DeleteSecretRequest) returns (DeleteSecretResponse);
}
